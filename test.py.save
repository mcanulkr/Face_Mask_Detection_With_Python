  GNU nano 5.4 test.py import warnings warnings.filterwarnings('ignore') import numpy as 
np import cv2 from keras.models import load_model facedetect = 
cv2.CascadeClassifier('haarcascade_frontalface_default.xml') threshold=0.90 
cap=cv2.VideoCapture(0) cap.set(3, 640) cap.set(4, 480) font=cv2.FONT_HERSHEY_COMPLEX 
model = load_model('MyTrainingModel.h5') import warnings def preprocessing(img): 
warnings.filterwarnings('ignore') img=img.astype("uint8") import numpy as np 
img=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) import cv2 img=cv2.equalizeHist(img) from 
keras.models import load_model img = img/255 facedetect = 
cv2.CascadeClassifier('haarcascade_frontalface_default.xml') return img threshold=0.90 
cap=cv2.VideoCapture(0) def get_className(classNo): cap.set(3, 640) if classNo==0: 
cap.set(4, 480) return "Mask" font=cv2.FONT_HERSHEY_COMPLEX elif classNo==1: model = 
load_model('MyTrainingModel.h5') return "No Mask"


while True: sucess, imgOrignal=cap.read() faces = 
	facedetect.detectMultiScale(imgOrignal,1.3,5) for x,y,w,h in faces:
def preprocessing(img): # cv2.rectangle(imgOrignal,(x,y),(x+w,y+h),(50,50,255),2) 
    img=img.astype("uint8") # cv2.rectangle(imgOrignal, (x,y-40),(x+w, y), 
    (50,50,255),-2) img=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) 
    crop_img=imgOrignal[y:y+h,x:x+h] img=cv2.equalizeHist(img) img=cv2.resize(crop_img, 
    (32,32)) img = img/255 img=preprocessing(img) return img img=img.reshape(1, 32, 32, 
    1)
		# cv2.putText(imgOrignal, "Class" , (20,35), font, 0.75, (0,0,255),2, 
		# cv2.LINE_AA) cv2.putText(imgOrignal, "Probability" , (20,75), font, 
		# 0.75, (255,0,255),2, cv2.LINE_AA)
		prediction=model.predict(img) classIndex=model.predict_classes(img) 
		probabilityValue=np.amax(prediction) if probabilityValue>threshold:
def get_className(classNo): if classIndex==0: 
				cv2.rectangle(imgOrignal,(x,y),(x+w,y+h),(0,255,0),2) 
				cv2.rectangle(imgOrignal, (x,y-40),(x+w, y), 
				(0,255,0),-2) cv2.putText(imgOrignal, 
				str(get_className(classIndex)),(x,y-10), font, 0.75, 
				(255,255,255),1, cv2.LINE_AA)
        if classNo==0: elif classIndex==1: 
				cv2.rectangle(imgOrignal,(x,y),(x+w,y+h),(50,50,255),2) 
				cv2.rectangle(imgOrignal, (x,y-40),(x+w, y), 
				(50,50,255),-2) cv2.putText(imgOrignal, 
				str(get_className(classIndex)),(x,y-10), font, 0.75, 
				(255,255,255),1, cv2.LINE_AA)
                return "Mask" elif classNo==1: # 
        cv2.putText(imgOrignal,str(round(probabilityValue*100, 2))+"%" ,(180, 75), font, 
        0.75, (255,0,0),2, cv2.LINE_AA) cv2.imshow("Result",imgOrignal) k=cv2.waitKey(1) 
        if k==ord('q'):
                return "No Mask" break


cap.release() cv2.destroyAllWindows()














